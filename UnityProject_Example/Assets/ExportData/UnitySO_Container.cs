//------------------------------------------------------------------------------
// Author : Strix
// Github : https://github.com/KorStrix/SheetParser
//------------------------------------------------------------------------------
// <auto-generated>
//     이 코드는 도구를 사용하여 생성되었습니다.
//     런타임 버전:4.0.30319.42000
//
//     파일 내용을 변경하면 잘못된 동작이 발생할 수 있으며, 코드를 다시 생성하면
//     이러한 변경 내용이 손실됩니다.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Collections.Generic;
using System.Linq;
using UnityEngine;



public class UnitySO_Container : UnityEngine.ScriptableObject
{
    
    private static UnitySO_Container _instance;
    
    public List<UnitySO> listData;
    
    public Dictionary<string, List<UnitySO>> mapData_Key_Is_strAutoEnum;
    
    public Dictionary<AutoEnumTest, List<UnitySO>> mapData_Key_Is_AutoEnumValue;
    
    public static UnitySO_Container instance
    {
        get
        {
               return _instance;
        }
    }
    
    public static void DoInit(UnitySO_Container pSingletonInstance, bool bIsUpdateChildAsset)
    {
          _instance = pSingletonInstance;
#if UNITY_EDITOR
           if(bIsUpdateChildAsset)
           {
              _instance.listData.Clear();
               Object[] arrObject = UnityEditor.AssetDatabase.LoadAllAssetRepresentationsAtPath(UnityEditor.AssetDatabase.GetAssetPath(_instance));
               for (int i = 0; i < arrObject.Length; i++)
                  _instance.listData.Add((UnitySO)arrObject[i]);
               if(Application.isPlaying == false)
               {
                   UnityEditor.EditorUtility.SetDirty(_instance);
                   UnityEditor.SceneManagement.EditorSceneManager.MarkSceneDirty(UnityEditor.SceneManagement.EditorSceneManager.GetActiveScene());
               }
           }
#endif
        _instance.Init_mapData_Key_Is_strAutoEnum();
        _instance.Init_mapData_Key_Is_AutoEnumValue();
    }
    
    private void Init_mapData_Key_Is_strAutoEnum()
    {
        var arrLocal = listData.GroupBy(x => x.strAutoEnum);
        this.mapData_Key_Is_strAutoEnum = arrLocal.ToDictionary(g => g.Key, g => g.ToList());
    }
    
    private void Init_mapData_Key_Is_AutoEnumValue()
    {
        var arrLocal = listData.GroupBy(x => x.AutoEnumValue);
        this.mapData_Key_Is_AutoEnumValue = arrLocal.ToDictionary(g => g.Key, g => g.ToList());
    }
}

public enum AutoEnumTest
{
    
    AutoEnum_1,
    
    AutoEnum_2,
    
    AutoEnum_3,
}

#region 
static
public class UnitySO_ContainerHelper
{
    
    public static List<UnitySO> GetUnitySO_List(this string eKey, System.Action<string> OnError = null)
    {
          List<UnitySO> pData;
          if(UnitySO_Container.instance.mapData_Key_Is_strAutoEnum.TryGetValue(eKey, out pData) == false)
          {
              if(OnError != null)
                  OnError(nameof(UnitySO_Container) + "- Not Found Data // Key : " + eKey);
          }
          return pData;
    }
    
    public static List<UnitySO> GetUnitySO_List(this AutoEnumTest eKey, System.Action<string> OnError = null)
    {
          List<UnitySO> pData;
          if(UnitySO_Container.instance.mapData_Key_Is_AutoEnumValue.TryGetValue(eKey, out pData) == false)
          {
              if(OnError != null)
                  OnError(nameof(UnitySO_Container) + "- Not Found Data // Key : " + eKey);
          }
          return pData;
    }
}
#endregion
